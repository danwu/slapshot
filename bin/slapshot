#!/usr/bin/env ruby
require 'gli'
require 'slapshot'
require 'io/console'

include GLI::App

program_desc 'A command line interface to the Appshot API'

#version Slapshot::VERSION

desc 'Your Appshot url'
flag [:url]

desc 'Your Appshot instance'
flag [:i,:instance]

desc 'Search your instance of Appshot'
arg_name 'Pass in the query'
command :search do |c|

  c.desc 'Limit the search to this application or group'
  c.flag [:a, :app]

  c.desc 'Export the results to an Excel file with the given name'
  c.flag [:x, :xls]

  c.desc 'The maximum number of results the search should return'
  c.default_value 20
  c.flag [:c, :count]

  c.action do |global_options,options,args|

     if options[:a]
       @sc.set_app options[:a]
     end

     if args.length != 1
       raise 'The search command takes exactly one argument: the query surrounded by single quotes'
     end
     
     r = @sc.search args[0], options[:c]
     
     if options[:x]
       @sc.to_xls r, options[:x]
       puts "Exported search results to #{options[:x]}"
     else
       puts @sc.to_table r
     end
  end
end

desc 'Login to the API and generate a token'
arg_name 'Pass in the username and password to login and generate a token'

command :login do |c|

  c.action do |global_options,options,args|

    url = global_options[:url] || ENV['APPSHOT_URL'] || "https://api.appshot.com"    
    
    if !File.exists? get_token_file

      print "Username: "
      username = gets
      
      print "Password: "
      password = STDIN.noecho(&:gets)
      puts

      token = create_token(url, username.strip, password.strip)
      
      if token
        puts "Generated token: #{token} and stored it in #{get_token_file}"
      else
        puts "Could not authenticate the given username and password"
      end
      
    else
      puts "Found existing file at #{get_token_file}"
    end
    
  end
  
end

desc 'Logout to the API, disactivate and remove the token'
command :logout do |c|

  c.action do |global_options,options,args|

    url = global_options[:url] || ENV['APPSHOT_URL'] || "https://api.appshot.com"    
    
    if File.exists? get_token_file

      token = remove_token(url)
      puts "Disactivated token: #{token} and removed #{get_token_file}"
      
    else
      puts "You are not logged in."
    end

  end
  
end


pre do |global,command,options,args|
    
  url = global[:url] || ENV['APPSHOT_URL'] || "https://api.appshot.com"    

  if command.names != 'login' and command.names != 'logout'

    instance = global[:i] || ENV['APPSHOT_INSTANCE']  

    @sc = Appshot.new url, get_token, instance
    
  end
  
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
